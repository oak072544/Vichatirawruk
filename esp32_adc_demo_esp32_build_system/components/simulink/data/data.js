var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"esp32_adc_demo","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"esp32_adc_demo.h\"            /* Model's header file */\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n *===============================================================\r\n * Simulink simulation information\r\n *===============================================================\r\n * Simulink model name: esp32_adc_demo\r\n * Note that:\r\n * Waijung 2 ESP32 target forces \"Higher priority value indicates\r\n * higher task priority\" under Simulink model configuration.\r\n * This is opposite to the default Simulink configuration where\r\n * lower priority value indicates higher priority.\r\n * Base priority level for all synchronous (periodic) and asynchronous tasks: 0\r\n * (This is set from Waijung 2 ESP32 target setup blockset under FreeRTOS tab -> Base task priority parameter.)\r\n * Synchronous (periodic) task information:\r\n * Number of synchronous periodic tasks: 1\r\n * Highest priority level needed for periodic tasks: 0\r\n * Highest priority level limit for the system: 16\r\n * Task 0 (Function name: vTaskFunctionBaseRate), base rate: 0.2 seconds, priority: 0\r\n * Default NULL definition: (NULL)\r\n *\r\n *===============================================================\r\n * Waijung 2 Info\r\n *===============================================================\r\n * Waijung 2 version: 20.11b\r\n * Waijung 2 target: ESP32\r\n * Target OS: FreeRTOS\r\n * Project path: D:\\Vichatirawruk\\esp32_adc_demo_esp32_build_system\r\n * Toolchain: ESP-IDF\r\n * ESP-IDF path: C:\\msys32\\home\\skris\\esp\\esp-idf\r\n *===============================================================\r\n */\r\n\r\n/* ANSI C headers */\r\n#include <float.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n\r\n/* Waijung 2 headers */\r\n#include \"waijung2_hwdrvlib.h\"\r\n\r\n/* Default xTaskCreate stack size */\r\n#ifndef DEFAULT_STACK_SIZE\r\n#define DEFAULT_STACK_SIZE             2048\r\n#endif\r\n\r\nvoid vTaskFunctionBaseRate(void *pvParameters)\r\n{\r\n  const TickType_t vPeriodicTaskPreiod = 200/portTICK_PERIOD_MS;\r\n  TickType_t xLastWakeTime;\r\n  xLastWakeTime = xTaskGetTickCount();\r\n\r\n  /* For Debuging the single task base rate, Ignore */\r\n  while (1) {\r\n    /* Setting the base sample rate: */\r\n    vTaskDelayUntil(&xLastWakeTime, vPeriodicTaskPreiod);\r\n\r\n    /* Release the Semaphores for all the base rate functions in the following function: */\r\n    esp32_adc_demo_step();\r\n\r\n    /* Get model outputs here */\r\n  }\r\n}\r\n\r\n/*\r\n * Spawn esp32_adc_demo_main as an independent FreeRTOS task\r\n * from your application code.\r\n */\r\nvoid app_main(void)\r\n{\r\n  /* Initialize model */\r\n  esp32_adc_demo_initialize();\r\n\r\n  /*\r\n   * base_priority variable is used for assigning periodic task priority.\r\n   * Note that, for periodic tasks, Priority property in Simulink blocks\r\n   * has no effects on task execution order. Fastest rate blocks (smaller\r\n   * block's sample time) always have higher priority.\r\n   */\r\n  UBaseType_t base_priority = 0;       /* Base priority */\r\n  xTaskCreate(vTaskFunctionBaseRate, \"vTaskFunctionBaseRate\", DEFAULT_STACK_SIZE,\r\n              NULL, base_priority + 0, NULL);\r\n}\r\n\r\n/* [EOF] */\r\n"},{"name":"esp32_adc_demo.c","type":"source","group":"model","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: esp32_adc_demo.c\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"esp32_adc_demo.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_esp32_adc_demo_T esp32_adc_demo_B;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_esp32_adc_demo_T esp32_adc_demo_M_;\r\nRT_MODEL_esp32_adc_demo_T *const esp32_adc_demo_M = &esp32_adc_demo_M_;\r\n\r\n/* Model step function */\r\nvoid esp32_adc_demo_step(void)\r\n{\r\n  /* S-Function (esp32_adc): '<Root>/ADC' */\r\n\r\n  /* Updating the ADC pins  */\r\n  adc1_config_width(ADC_WIDTH_BIT_12);//Set the ADC module 1 resolution as 12Bit\r\n  adc1_config_channel_atten(ADC1_CHANNEL_0, ADC_ATTEN_DB_11);// Initializing ADC Channel as GPIO36\r\n  esp32_adc_demo_B.ADC = adc1_get_raw(ADC1_CHANNEL_0);\r\n\r\n  /* RelationalOperator: '<S1>/Compare' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   */\r\n  esp32_adc_demo_B.Compare = (esp32_adc_demo_B.ADC >= 500);\r\n\r\n  /* S-Function (esp32_digital_output3): '<Root>/Digital Out' */\r\n\r\n  /* Updating the pins of DigitalOut */\r\n  gpio_set_level(2,(uint32_t) esp32_adc_demo_B.Compare);/* GPIO2 */\r\n\r\n  /* MATLAB Function: '<Root>/MATLAB Function' */\r\n  esp32_adc_demo_B.y = (esp32_adc_demo_B.ADC >= 500);\r\n\r\n  /* S-Function (esp32_digital_output3): '<Root>/Digital Out1' */\r\n\r\n  /* Updating the pins of DigitalOut1 */\r\n  gpio_set_level(12,(uint32_t) esp32_adc_demo_B.y);/* GPIO12 */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid esp32_adc_demo_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize error status */\r\n  rtmSetErrorStatus(esp32_adc_demo_M, (NULL));\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &esp32_adc_demo_B), 0,\r\n                sizeof(B_esp32_adc_demo_T));\r\n\r\n  /* Start for S-Function (esp32_adc): '<Root>/ADC' */\r\n\r\n  //================================================================= ADC pins: 'ADC' Initialization\r\n\r\n  /* Start for S-Function (esp32_digital_output3): '<Root>/Digital Out' */\r\n\r\n  //================================================================= GPIO Out pins: 'DigitalOut' Initialization\r\n  //GPIO_initialize_DigitalOut();\r\n\r\n  /* Start for S-Function (esp32_digital_output3): '<Root>/Digital Out1' */\r\n\r\n  //================================================================= GPIO Out pins: 'DigitalOut1' Initialization\r\n  //GPIO_initialize_DigitalOut1();\r\n\r\n  /* Enable for S-Function (esp32_digital_output3): '<Root>/Digital Out' */\r\n  /* Level2 S-Function Block: '<Root>/Digital Out' (esp32_digital_output3) */\r\n  GPIO_initialize_DigitalOut();\r\n\r\n  /* Enable for S-Function (esp32_digital_output3): '<Root>/Digital Out1' */\r\n  /* Level2 S-Function Block: '<Root>/Digital Out1' (esp32_digital_output3) */\r\n  GPIO_initialize_DigitalOut1();\r\n}\r\n\r\n/* Model terminate function */\r\nvoid esp32_adc_demo_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/* [EOF] */\r\n"},{"name":"esp32_adc_demo.h","type":"header","group":"model","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: esp32_adc_demo.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_esp32_adc_demo_h_\r\n#define RTW_HEADER_esp32_adc_demo_h_\r\n#ifndef esp32_adc_demo_COMMON_INCLUDES_\r\n#define esp32_adc_demo_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* esp32_adc_demo_COMMON_INCLUDES_ */\r\n\r\n#include \"waijung2_hwdrvlib.h\"\r\n#include \"esp32_adc_demo_types.h\"\r\n#include <stddef.h>\r\n#include <string.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  int16_T ADC;                         /* '<Root>/ADC' */\r\n  boolean_T Compare;                   /* '<S1>/Compare' */\r\n  boolean_T y;                         /* '<Root>/MATLAB Function' */\r\n} B_esp32_adc_demo_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_esp32_adc_demo_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_esp32_adc_demo_T esp32_adc_demo_B;\r\n\r\n/* Model entry point functions */\r\nextern void esp32_adc_demo_initialize(void);\r\nextern void esp32_adc_demo_step(void);\r\nextern void esp32_adc_demo_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_esp32_adc_demo_T *const esp32_adc_demo_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'esp32_adc_demo'\r\n * '<S1>'   : 'esp32_adc_demo/Compare To Constant'\r\n * '<S2>'   : 'esp32_adc_demo/MATLAB Function'\r\n */\r\n#endif                                 /* RTW_HEADER_esp32_adc_demo_h_ */\r\n\r\n/* [EOF] */\r\n"},{"name":"esp32_adc_demo_private.h","type":"header","group":"model","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: esp32_adc_demo_private.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_esp32_adc_demo_private_h_\r\n#define RTW_HEADER_esp32_adc_demo_private_h_\r\n#include \"rtwtypes.h\"\r\n#endif                                /* RTW_HEADER_esp32_adc_demo_private_h_ */\r\n\r\n/* [EOF] */\r\n"},{"name":"esp32_adc_demo_types.h","type":"header","group":"model","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: esp32_adc_demo_types.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_esp32_adc_demo_types_h_\r\n#define RTW_HEADER_esp32_adc_demo_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_esp32_adc_demo_T RT_MODEL_esp32_adc_demo_T;\r\n\r\n#endif                                 /* RTW_HEADER_esp32_adc_demo_types_h_ */\r\n\r\n/* [EOF] */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: Unspecified\r\n *   Signed integer division rounds to: Undefined\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/* [EOF] */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"esp32_adc_demo.h\"\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/* [EOF] */\r\n"},{"name":"waijung2_hwdrvlib.c","type":"source","group":"","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: waijung2_hwdrvlib.c\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"esp32_adc_demo.h\"            /* Model's header file */\r\n\r\n/************* GPIO Output Initialize Function: DigitalOut *************/\r\nvoid GPIO_initialize_DigitalOut()\r\n{\r\n  /*gpio_config_t io_conf;\r\n     io_conf.pin_bit_mask = ((1ULL<<2));            // Select pins\r\n     io_conf.mode = GPIO_MODE_OUTPUT;                     // Pins mode\r\n     io_conf.intr_type = GPIO_INTR_DISABLE;          // Disable interrupt\r\n     io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE; \t// Disable pull-down mode\r\n     io_conf.pull_up_en = GPIO_PULLUP_DISABLE;\t\t// Disable pull-up mode\r\n     gpio_config(&io_conf);*/\r\n  gpio_pad_select_gpio(2);\r\n  gpio_set_direction(2, GPIO_MODE_OUTPUT);\r\n  gpio_set_drive_capability(GPIO_NUM_2, GPIO_DRIVE_CAP_2);\r\n}\r\n\r\n/************* GPIO Output Initialize Function: DigitalOut1 *************/\r\nvoid GPIO_initialize_DigitalOut1()\r\n{\r\n  /*gpio_config_t io_conf;\r\n     io_conf.pin_bit_mask = ((1ULL<<12));            // Select pins\r\n     io_conf.mode = GPIO_MODE_OUTPUT_OD;                     // Pins mode\r\n     io_conf.intr_type = GPIO_INTR_DISABLE;          // Disable interrupt\r\n     io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE; \t// Disable pull-down mode\r\n     io_conf.pull_up_en = GPIO_PULLUP_DISABLE;\t\t// Disable pull-up mode\r\n     gpio_config(&io_conf);*/\r\n  gpio_pad_select_gpio(12);\r\n  gpio_set_direction(12, GPIO_MODE_OUTPUT_OD);\r\n  gpio_set_drive_capability(GPIO_NUM_12, GPIO_DRIVE_CAP_2);\r\n}\r\n\r\n/* [EOF] */\r\n"},{"name":"waijung2_hwdrvlib.h","type":"header","group":"","path":"D:\\Vichatirawruk\\esp32_adc_demo_esp32","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: waijung2_hwdrvlib.h\r\n *\r\n * Code generated with Waijung 2 ESP32 Target Blockset,\r\n * for Simulink model 'esp32_adc_demo'.\r\n *\r\n * Model version                  : 8.0\r\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\r\n * C/C++ source code generated on : Thu Aug 25 08:51:49 2022\r\n *\r\n * Target selection: esp32.tlc\r\n * Embedded hardware selection: Cadence Design Systems (Tensilica)->Xtensa® single-/dual-core 32-bit LX6 microprocessor\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_waijung2_hwdrvlib_h_\r\n#define RTW_HEADER_waijung2_hwdrvlib_h_\r\n\r\n/* ESP32 headers */\r\n#include \"freertos/FreeRTOS.h\"\r\n#include \"freertos/task.h\"\r\n#include \"esp_system.h\"\r\n#include \"esp_spi_flash.h\"\r\n#include \"soc/timer_group_struct.h\"\r\n#include \"soc/timer_group_reg.h\"\r\n#include \"freertos/semphr.h\"\r\n#include \"esp_err.h\"\r\n#include \"esp_log.h\"\r\n#include <stdio.h>\r\n#include <stdint.h>\r\n#include <stddef.h>\r\n#include \"driver/adc.h\"\r\n#include \"driver/gpio.h\"\r\n#define BASE_SAMPLE_TIME               0.2                       /* Base sample time in second */\r\n\r\nvoid GPIO_initialize_DigitalOut();\r\nvoid GPIO_initialize_DigitalOut1();\r\n\r\n#endif                                 /* RTW_HEADER_waijung2_hwdrvlib_h_ */\r\n\r\n/* [EOF] */\r\n"}],"trace":"{\"model\":\"esp32_adc_demo\",\"sources\":[\"esp32_adc_demo.c\",\"esp32_adc_demo.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\"],\"sidPrefixes\":[\"esp32_adc_demo\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[44,3,44,10],\"els\":[\"1:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[44,11,44,14],\"els\":[\"1:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[44,14,44,15],\"els\":[\"1:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,3,45,12],\"els\":[\"1:4:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,13,45,20],\"els\":[\"1:4:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[45,20,45,21],\"els\":[\"1:4:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,3,46,12],\"els\":[\"1:13\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,13,46,14],\"els\":[\"1:13\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[46,14,46,15],\"els\":[\"1:13\"],\"ct\":{\"1\":1,\"0\":0}}]},\"0\":{\"records\":[{\"tk\":[36,3,36,20],\"els\":[\"0:2\"]},{\"tk\":[36,20,36,21],\"els\":[\"0:2\"]},{\"tk\":[36,21,36,37],\"els\":[\"0:2\"]},{\"tk\":[36,37,36,38],\"els\":[\"0:2\"]},{\"tk\":[36,38,36,39],\"els\":[\"0:2\"]},{\"tk\":[37,3,37,28],\"els\":[\"0:2\"]},{\"tk\":[37,28,37,29],\"els\":[\"0:2\"]},{\"tk\":[37,29,37,43],\"els\":[\"0:2\"]},{\"tk\":[37,43,37,44],\"els\":[\"0:2\"]},{\"tk\":[37,45,37,60],\"els\":[\"0:2\"]},{\"tk\":[37,60,37,61],\"els\":[\"0:2\"]},{\"tk\":[37,61,37,62],\"els\":[\"0:2\"]},{\"tk\":[38,3,38,19],\"els\":[\"0:2\"]},{\"tk\":[38,19,38,20],\"els\":[\"0:2\"]},{\"tk\":[38,20,38,23],\"els\":[\"0:2\"]},{\"tk\":[38,24,38,25],\"els\":[\"0:2\"]},{\"tk\":[38,26,38,38],\"els\":[\"0:2\"]},{\"tk\":[38,38,38,39],\"els\":[\"0:2\"]},{\"tk\":[38,39,38,53],\"els\":[\"0:2\"]},{\"tk\":[38,53,38,54],\"els\":[\"0:2\"]},{\"tk\":[38,54,38,55],\"els\":[\"0:2\"]},{\"tk\":[43,3,43,19],\"els\":[\"0:4:2#out:1\"]},{\"tk\":[43,20,43,27],\"els\":[\"0:4:2#out:1\"]},{\"tk\":[43,28,43,29],\"els\":[\"0:4:2#out:1\",\"0:4:2\"]},{\"tk\":[43,31,43,47],\"els\":[\"0:4:2\"]},{\"tk\":[43,48,43,51],\"els\":[\"0:4:2\"]},{\"tk\":[43,52,43,54],\"els\":[\"0:4:2\"]},{\"tk\":[43,55,43,58],\"els\":[\"0:4:2\",\"0:4:3\"]},{\"tk\":[48,3,48,17],\"els\":[\"0:8\"]},{\"tk\":[48,17,48,18],\"els\":[\"0:8\"]},{\"tk\":[48,18,48,19],\"els\":[\"0:8\"]},{\"tk\":[48,19,48,20],\"els\":[\"0:8\"]},{\"tk\":[48,20,48,21],\"els\":[\"0:8\"]},{\"tk\":[48,21,48,29],\"els\":[\"0:8\"]},{\"tk\":[48,29,48,30],\"els\":[\"0:8\"]},{\"tk\":[48,31,48,47],\"els\":[\"0:8\"]},{\"tk\":[48,47,48,48],\"els\":[\"0:8\"]},{\"tk\":[48,48,48,55],\"els\":[\"0:8\"]},{\"tk\":[48,55,48,56],\"els\":[\"0:8\"]},{\"tk\":[48,56,48,57],\"els\":[\"0:8\"]},{\"tk\":[51,3,51,19],\"els\":[\"0:13::22#out:2\"]},{\"tk\":[51,20,51,21],\"els\":[\"0:13::22#out:2\"]},{\"tk\":[51,22,51,23],\"els\":[\"0:13::22#out:2\",\"0:13:37-45\",\"0:13\",\"0:13::22\",\"0:13:56-65\"]},{\"tk\":[51,25,51,41],\"els\":[\"0:13\",\"0:13::22\"]},{\"tk\":[51,42,51,45],\"els\":[\"0:13\",\"0:13::22\"]},{\"tk\":[51,46,51,48],\"els\":[\"0:13:24-32\",\"0:13\",\"0:13::22\"]},{\"tk\":[51,49,51,52],\"els\":[\"0:13:24-32\",\"0:13\",\"0:13::22\"]},{\"tk\":[56,3,56,17],\"els\":[\"0:14\"]},{\"tk\":[56,17,56,18],\"els\":[\"0:14\"]},{\"tk\":[56,18,56,20],\"els\":[\"0:14\"]},{\"tk\":[56,20,56,21],\"els\":[\"0:14\"]},{\"tk\":[56,21,56,22],\"els\":[\"0:14\"]},{\"tk\":[56,22,56,30],\"els\":[\"0:14\"]},{\"tk\":[56,30,56,31],\"els\":[\"0:14\"]},{\"tk\":[56,32,56,48],\"els\":[\"0:14\"]},{\"tk\":[56,48,56,49],\"els\":[\"0:14\"]},{\"tk\":[56,49,56,50],\"els\":[\"0:14\"]},{\"tk\":[56,50,56,51],\"els\":[\"0:14\"]},{\"tk\":[56,51,56,52],\"els\":[\"0:14\"]},{\"tk\":[87,3,87,29],\"els\":[\"0:8\"]},{\"tk\":[87,29,87,30],\"els\":[\"0:8\"]},{\"tk\":[87,30,87,31],\"els\":[\"0:8\"]},{\"tk\":[87,31,87,32],\"els\":[\"0:8\"]},{\"tk\":[91,3,91,30],\"els\":[\"0:14\"]},{\"tk\":[91,30,91,31],\"els\":[\"0:14\"]},{\"tk\":[91,31,91,32],\"els\":[\"0:14\"]},{\"tk\":[91,32,91,33],\"els\":[\"0:14\"]}]}}}","blocks":[{"RTWName":"<Root>/ADC","SIDString":"esp32_adc_demo:2"},{"RTWName":"<S1>/u","SIDString":"esp32_adc_demo:4:1"},{"RTWName":"<S1>/Compare","SIDString":"esp32_adc_demo:4:2"},{"RTWName":"<S1>/Constant","SIDString":"esp32_adc_demo:4:3"},{"RTWName":"<S1>/y","SIDString":"esp32_adc_demo:4:4"},{"RTWName":"<Root>/Digital Out","SIDString":"esp32_adc_demo:8"},{"RTWName":"<Root>/Digital Out1","SIDString":"esp32_adc_demo:14"},{"RTWName":"<S2>:1","SIDString":"esp32_adc_demo:13:1"},{"RTWName":"<Root>/Waijung 2 Target Setup","SIDString":"esp32_adc_demo:1"},{"RTWName":"<Root>/Compare\nTo Constant","SIDString":"esp32_adc_demo:4"},{"RTWName":"<Root>/MATLAB Function","SIDString":"esp32_adc_demo:13"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};